@using MilestoneTracker.Model
@model BurndownChartModel
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@{
    var baseQuery = new
    {
        teamName = Model.TeamName,
        milestone = Model.Milestone,
        label = Model.LabelsFilter
    };
}
<style type="text/css">

    .chart-area {
        min-width: 600px;
        min-height: 400px;
        width: 100%;
        height: 100%;
    }

    .total-issues {
        font-weight: bold;
    }

    .options {
        border: 1px solid black;
        padding-top: 1em;
        padding-bottom: 1em;
    }
</style>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<div id="chart_div" class="chart-area"></div>
<div class="total-issues">Total number of issues: <span id="totalIssues">[loading...]</span></div>
<div class="total-issues">Open issues: <span id="openIssues">[loading...]</span></div>
<br />

<div class="options">
    <span class="text-primary">Include investigations: </span>
    <input type="checkbox" id="chkIncludeInvestigations" checked='@(Model.IncludeInvestigations?"checked":"")' onchange="LoadData()" />
</div>
<script type="text/javascript">
    google.charts.load('current', {
        packages: ['corechart', 'line']
    });
    google.charts.setOnLoadCallback(LoadData);

    function LoadData() {
        var baseDataUrl = '@Html.Raw(Url.Action("GetBurndownDataAsync", "Burndown", baseQuery))';
        var includeInvestigations = $('#chkIncludeInvestigations').is(':checked');

        var dataQueryUrl = baseDataUrl + '&includeInvestigations=' + includeInvestigations;
        $.ajax({
            url: dataQueryUrl,
            type: 'GET',
            dataType: 'json',
            success: function (data, err) {
                    PopulationChart(data.workData);
                    document.getElementById("totalIssues").innerHTML = data.totalNumberOfIssues;
                    document.getElementById("openIssues").innerHTML = data.numberOfIssuesLeft;
                    return false;
                }
            });

            return false;
    }

    function PopulationChart(response) {
        var data = new google.visualization.DataTable();
        data.addColumn('datetime', 'Date');
        data.addColumn('number', 'Days worth of work left');

        $.each(response, function (i, item) {
            var date = new Date(item.date);

            data.addRow([date, item.daysOfWorkLeft]);
        });

        var options = {
             chartArea: {
                left: 40,
                width: '100%'
            },
            hAxis: {
                //title: 'Date',
                format: 'dd, MMM'
            },
            vAxis: {
                //title: 'Work left'
            },
            series: {
                1: { curveType: 'function' }
            },
            width: '100%'
        };

        var chart = new google.visualization.LineChart(document.getElementById('chart_div'));
        chart.draw(data, options);
        return false;
    }
</script>  